<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CFBase</name>
    </assembly>
    <members>
        <member name="T:COM.CF.AutoAdapter">
            <summary>
            功能：封装CF的Adapter
            时间：2014-10-3
            作者：meric
            </summary>
        </member>
        <member name="M:COM.CF.AutoAdapter.#ctor(System.String,COM.CF.DB)">
            <summary>
            构造函数，初始化SqlAdapter和DataTable
            </summary>
            <param name="sql">sql</param>
            <param name="oDB">DB对象的一个实例</param>
        </member>
        <member name="M:COM.CF.AutoAdapter.AddNewRow">
            <summary>
            在数据表的第一行插入一条数据，并返回该数据
            </summary>
            <returns>返回插入到数据表的数据</returns>
        </member>
        <member name="M:COM.CF.AutoAdapter.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="P:COM.CF.AutoAdapter.Row">
            <summary>
            当前数据行（单条）
            </summary>
        </member>
        <member name="P:COM.CF.AutoAdapter.Rows">
            <summary>
            当前数据行（多条）
            </summary>
        </member>
        <member name="T:COM.CF.CtrlPage">
            <summary>
            功能：后台控制页面，该页面会处理前台的HTTP请求，该类为一个抽象类，实现部分方法，另一部分方法到实例类里去实现 
            时间：2013-10-25
            作者：meric
            </summary>
        </member>
        <member name="M:COM.CF.CtrlPage.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:COM.CF.CtrlPage.EventMain">
            <summary>
            处理方法
            </summary>
        </member>
        <member name="M:COM.CF.CtrlPage.WriteHead">
            <summary>
            输出页面的头部
            </summary>
        </member>
        <member name="M:COM.CF.CtrlPage.HandleException(COM.CF.CFException)">
            <summary>
            抽象方法，接管异常处理
            </summary>
            <param name="e">异常信息</param>
        </member>
        <member name="M:COM.CF.CtrlPage.WriteErrorNoEnd(COM.CF.enErrType,System.String)">
            <summary>
            抽象方法，输出错误信息，但不输出页面尾部
            </summary>
            <param name="errType">错误类型</param>
            <param name="msg">错误信息</param>
        </member>
        <member name="M:COM.CF.CtrlPage.WriteHead(COM.CF.Web.enPageType,System.String)">
            <summary>
            抽象方法，输出页面头部
            </summary>
            <param name="pageType">页面类型</param>
            <param name="title">页面标题</param>
        </member>
        <member name="M:COM.CF.CtrlPage.WriteTail">
            <summary>
            抽象方法，输出页面尾部
            </summary>
        </member>
        <member name="P:COM.CF.CtrlPage.RequestForm">
            <summary>
            请求参数，包括POST和GET，但不能混合 
            </summary>
        </member>
        <member name="P:COM.CF.CtrlPage.WebForm">
            <summary>
            页面控制类
            </summary>
        </member>
        <member name="P:COM.CF.CtrlPage.UsrLogin">
            <summary>
            当前页面的登录控制，继承类里必须实现
            </summary>
        </member>
        <member name="T:COM.CF.DB">
            <summary>
            功能：封装Sql操作类
            时间：2013-10-2
            作者：Meric
            </summary>
        </member>
        <member name="M:COM.CF.DB.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="constr">连接字符串</param>
        </member>
        <member name="M:COM.CF.DB.GetConnection">
            <summary>
            获得打开的连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行sql语句，返回影响条数
            </summary>
            <param name="sql">sql语句</param>
            <param name="pars">传递给sql语句的参数</param>
            <returns>返回受影响的条数</returns>
        </member>
        <member name="M:COM.CF.DB.ExecuteScalar(System.String)">
            <summary>
            执行sql语句，返回查询结果
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回查询反返回结果的第一行的第一列，忽略其它行和列</returns>
        </member>
        <member name="M:COM.CF.DB.ExeCuteScalar(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            执行sql语句，返回查询结果，该方法需要传入连接
            </summary>
            <param name="sql">sql语句</param>
            <param name="oConn">已打开的数据库连接</param>
            <returns>返回查询反返回结果的第一行的第一列，忽略其它行和列</returns>
        </member>
        <member name="M:COM.CF.DB.GetAutoAdapter(System.String)">
            <summary>
            得到一个AutoAdapter的实例
            </summary>
            <param name="sql">sql语句</param>
            <returns>返回一个AutoAdapter的实例</returns>
        </member>
        <member name="M:COM.CF.DB.GetMoreSQLXML(System.Data.SqlClient.SqlCommand,System.Text.StringBuilder)">
            <summary>
            获得。。。。
            </summary>
            <param name="cm"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.GetNotOpenConnection">
            <summary>
            获得一个没有打开的数据库连接
            </summary>
            <returns>返回一个没有打开的数据库连接</returns>
        </member>
        <member name="M:COM.CF.DB.GetRawSQLXML(System.String)">
            <summary>
            获得。。。。
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.GetRawSQLXML(System.String,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="sql"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.GetSingleSQLXML(System.String)">
            <summary>
            获得。。。
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLDataSet(System.String)">
            <summary>
            根据sql获得DataSet
            </summary>
            <param name="strsql">sql</param>
            <returns>返回DataSet</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLDataSet(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            通过存储过程返回DataSet
            </summary>
            <param name="procedureName">存储过程名</param>
            <param name="sqlparams">参数</param>
            <returns></returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLRows(System.String)">
            <summary>
            根据sql获得DataRow集合
            </summary>
            <param name="strsql">sql</param>
            <returns>返回DataRow集合</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLRows(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            传入数据库连接，根据sql获得DataRow集合
            </summary>
            <param name="strsql">sql</param>
            <param name="oConn">数据库连接 无须打开</param>
            <returns>返回DataRow集合</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLRows(System.String,System.Int32)">
            <summary>
            根据sql语句返回指定行数的数据
            </summary>
            <param name="strsql">sql语句</param>
            <param name="n">需要的数据行数</param>
            <returns>返回指定行数的DataRow</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLRows(System.String,System.Int32,System.Int32)">
            <summary>
            根据sql语句返回从指定行开始的需要的行数的数据
            </summary>
            <param name="strsql">sql语句</param>
            <param name="start">开始的行数</param>
            <param name="n">需要获取的行数</param>
            <returns>返回指定行数的DataRow</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLSingleRow(System.String)">
            <summary>
            根据sql获得单条数据
            </summary>
            <param name="strsql">sql语句</param>
            <returns>返回指定的数据</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLSingleRow(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            传入数据库连接 根据sql获得单条数据
            </summary>
            <param name="strsql">sql</param>
            <param name="oConn">数据库连接</param>
            <returns>条例sql检索的音箱数据</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLTab(System.String)">
            <summary>
            根据sql语句获得DataTable
            </summary>
            <param name="strsql">sql</param>
            <returns>返回符合查询条件的DataTable</returns>
        </member>
        <member name="M:COM.CF.DB.GetSQLTab(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            通过存储过程获得DataTable
            </summary>
            <param name="procedureName">存储过程名</param>
            <param name="param">存储过程参数</param>
            <returns></returns>
        </member>
        <member name="T:COM.CF.ILoginUsr">
            <summary>
            功能：登录用户接口
            时间：2013-10-1
            作者：meric
            </summary>
        </member>
        <member name="M:COM.CF.ILoginUsr.MustLogin">
            <summary>
            控制页面必须登录
            </summary>
        </member>
        <member name="P:COM.CF.ILoginUsr.Logined">
            <summary>
            判断是否登录
            </summary>
        </member>
        <member name="T:COM.CF.UIPage">
            <summary>
            功能：抽象类UIPage，定义页面的基本属性和方法，所有CF框架类的基类CFPage继承此抽象类
            时间：2013-10-22
            作者：meric
            </summary>
        </member>
        <member name="M:COM.CF.UIPage.#ctor">
            <summary>
            构造参数
            </summary>
        </member>
        <member name="M:COM.CF.UIPage.DelQueryName(System.String)">
            <summary>
            从QueryString中删除指定的键
            </summary>
            <param name="delkey">需要删除的键</param>
            <returns>返回删除键后的QueryString</returns>
        </member>
        <member name="M:COM.CF.UIPage.DelQueryNameAndNext(System.String)">
            <summary>
            从QueryString中删除指定的键
            </summary>
            <param name="delkey">需要删除的键</param>
            <returns>返回删除键后的QueryString</returns>
        </member>
        <member name="M:COM.CF.UIPage.GetPathID">
            <summary>
            获取URL的PathID
            </summary>
            <returns>返回请求的PathID</returns>
        </member>
        <member name="M:COM.CF.UIPage.GetPathStr">
            <summary>
            获得Path字符串
            </summary>
            <returns>返回Path字符串</returns>
        </member>
        <member name="M:COM.CF.UIPage.HandleException(COM.CF.CFException)">
            <summary>
            抽象方法，具体类里实现，处理页面异常
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:COM.CF.UIPage.Page_Error(System.Object,System.EventArgs)">
            <summary>
            页面错误接管
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:COM.CF.UIPage.RequestForm">
            <summary>
            RequestForm 请求参数封装
            </summary>
        </member>
        <member name="P:COM.CF.UIPage.UsrLogin">
            <summary>
            登录用户 
            </summary>
        </member>
        <member name="P:COM.CF.UIPage.ViewBag">
            <summary>
            ViewBag和ViewData为用户在使用页面时可自定义自增加的属性
            </summary>
        </member>
        <member name="P:COM.CF.UIPage.ViewData">
            <summary>
            ViewBag和ViewData为用户在使用页面时可自定义自增加的属性
            </summary>
        </member>
    </members>
</doc>
